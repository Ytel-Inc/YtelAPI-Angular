/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body22
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body22', ['BaseModel', Body22Model]);

    function Body22Model(BaseModel) {
        var Body22 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.callSid = this.getValue(obj.callSid);
            this.audioUrl = this.getValue(obj.audioUrl);
            this.sayText = this.getValue(obj.sayText);
            this.length = this.getValue(obj.length);
            this.direction = this.getValue(obj.direction);
            this.mix = this.getValue(obj.mix);
        };

        Body22.prototype = new BaseModel();
        Body22.prototype.constructor = Body22;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body22.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'callSid', realName: 'CallSid' },
                { name: 'audioUrl', realName: 'AudioUrl' },
                { name: 'sayText', realName: 'SayText' },
                { name: 'length', realName: 'Length' },
                { name: 'direction', realName: 'Direction' },
                { name: 'mix', realName: 'Mix' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body22.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The unique identifier of each call resource
         *
         * @return {string}
         */
        Body22.prototype.getCallSid = function () {
            return this.callSid;
        };
    
        /**
         * Setter for CallSid
         * 
         * @param {string} value 
         */
        Body22.prototype.setCallSid = function (value) {
            this.callSid = value;
        };
    
        /**
         * URL to sound that should be played. You also can add more than one audio file using semicolons e.g. http:
         * //example.com/audio1.mp3;http://example.com/audio2.wav
         *
         * @return {string}
         */
        Body22.prototype.getAudioUrl = function () {
            return this.audioUrl;
        };
    
        /**
         * Setter for AudioUrl
         * 
         * @param {string} value 
         */
        Body22.prototype.setAudioUrl = function (value) {
            this.audioUrl = value;
        };
    
        /**
         * Valid alphanumeric string that should be played to the In-progress call.
         *
         * @return {string}
         */
        Body22.prototype.getSayText = function () {
            return this.sayText;
        };
    
        /**
         * Setter for SayText
         * 
         * @param {string} value 
         */
        Body22.prototype.setSayText = function (value) {
            this.sayText = value;
        };
    
        /**
         * Time limit in seconds for audio play back
         *
         * @return {int|null}
         */
        Body22.prototype.getLength = function () {
            return this.length;
        };
    
        /**
         * Setter for Length
         * 
         * @param {int|null} value 
         */
        Body22.prototype.setLength = function (value) {
            this.length = value;
        };
    
        /**
         * The leg of the call audio will be played to
         *
         * @return {Direction1Enum|null}
         */
        Body22.prototype.getDirection = function () {
            return this.direction;
        };
    
        /**
         * Setter for Direction
         * 
         * @param {Direction1Enum|null} value 
         */
        Body22.prototype.setDirection = function (value) {
            this.direction = value;
        };
    
        /**
         * If false, all other audio will be muted
         *
         * @return {bool|null}
         */
        Body22.prototype.getMix = function () {
            return this.mix;
        };
    
        /**
         * Setter for Mix
         * 
         * @param {bool|null} value 
         */
        Body22.prototype.setMix = function (value) {
            this.mix = value;
        };
    
        return Body22;
    }

}(angular));
