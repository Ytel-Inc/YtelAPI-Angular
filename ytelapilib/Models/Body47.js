/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body47
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body47', ['BaseModel', Body47Model]);

    function Body47Model(BaseModel) {
        var Body47 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.phoneNumber = this.getValue(obj.phoneNumber);
            this.voiceUrl = this.getValue(obj.voiceUrl);
            this.friendlyName = this.getValue(obj.friendlyName);
            this.voiceMethod = this.getValue(obj.voiceMethod);
            this.voiceFallbackUrl = this.getValue(obj.voiceFallbackUrl);
            this.voiceFallbackMethod = this.getValue(obj.voiceFallbackMethod);
            this.hangupCallback = this.getValue(obj.hangupCallback);
            this.hangupCallbackMethod = this.getValue(obj.hangupCallbackMethod);
            this.heartbeatUrl = this.getValue(obj.heartbeatUrl);
            this.heartbeatMethod = this.getValue(obj.heartbeatMethod);
            this.smsUrl = this.getValue(obj.smsUrl);
            this.smsMethod = this.getValue(obj.smsMethod);
            this.smsFallbackUrl = this.getValue(obj.smsFallbackUrl);
            this.smsFallbackMethod = this.getValue(obj.smsFallbackMethod);
        };

        Body47.prototype = new BaseModel();
        Body47.prototype.constructor = Body47;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body47.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'phoneNumber', realName: 'PhoneNumber' },
                { name: 'voiceUrl', realName: 'VoiceUrl' },
                { name: 'friendlyName', realName: 'FriendlyName' },
                { name: 'voiceMethod', realName: 'VoiceMethod' },
                { name: 'voiceFallbackUrl', realName: 'VoiceFallbackUrl' },
                { name: 'voiceFallbackMethod', realName: 'VoiceFallbackMethod' },
                { name: 'hangupCallback', realName: 'HangupCallback' },
                { name: 'hangupCallbackMethod', realName: 'HangupCallbackMethod' },
                { name: 'heartbeatUrl', realName: 'HeartbeatUrl' },
                { name: 'heartbeatMethod', realName: 'HeartbeatMethod' },
                { name: 'smsUrl', realName: 'SmsUrl' },
                { name: 'smsMethod', realName: 'SmsMethod' },
                { name: 'smsFallbackUrl', realName: 'SmsFallbackUrl' },
                { name: 'smsFallbackMethod', realName: 'SmsFallbackMethod' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body47.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * A valid Ytel number (E.164 format).
         *
         * @return {string}
         */
        Body47.prototype.getPhoneNumber = function () {
            return this.phoneNumber;
        };
    
        /**
         * Setter for PhoneNumber
         * 
         * @param {string} value 
         */
        Body47.prototype.setPhoneNumber = function (value) {
            this.phoneNumber = value;
        };
    
        /**
         * URL requested once the call connects
         *
         * @return {string}
         */
        Body47.prototype.getVoiceUrl = function () {
            return this.voiceUrl;
        };
    
        /**
         * Setter for VoiceUrl
         * 
         * @param {string} value 
         */
        Body47.prototype.setVoiceUrl = function (value) {
            this.voiceUrl = value;
        };
    
        /**
         * Phone number friendly name description
         *
         * @return {string|null}
         */
        Body47.prototype.getFriendlyName = function () {
            return this.friendlyName;
        };
    
        /**
         * Setter for FriendlyName
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setFriendlyName = function (value) {
            this.friendlyName = value;
        };
    
        /**
         * Post or Get
         *
         * @return {string|null}
         */
        Body47.prototype.getVoiceMethod = function () {
            return this.voiceMethod;
        };
    
        /**
         * Setter for VoiceMethod
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setVoiceMethod = function (value) {
            this.voiceMethod = value;
        };
    
        /**
         * URL requested if the voice URL is not available
         *
         * @return {string|null}
         */
        Body47.prototype.getVoiceFallbackUrl = function () {
            return this.voiceFallbackUrl;
        };
    
        /**
         * Setter for VoiceFallbackUrl
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setVoiceFallbackUrl = function (value) {
            this.voiceFallbackUrl = value;
        };
    
        /**
         * Post or Get
         *
         * @return {string|null}
         */
        Body47.prototype.getVoiceFallbackMethod = function () {
            return this.voiceFallbackMethod;
        };
    
        /**
         * Setter for VoiceFallbackMethod
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setVoiceFallbackMethod = function (value) {
            this.voiceFallbackMethod = value;
        };
    
        /**
         * callback url after a hangup occurs
         *
         * @return {string|null}
         */
        Body47.prototype.getHangupCallback = function () {
            return this.hangupCallback;
        };
    
        /**
         * Setter for HangupCallback
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setHangupCallback = function (value) {
            this.hangupCallback = value;
        };
    
        /**
         * Post or Get
         *
         * @return {string|null}
         */
        Body47.prototype.getHangupCallbackMethod = function () {
            return this.hangupCallbackMethod;
        };
    
        /**
         * Setter for HangupCallbackMethod
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setHangupCallbackMethod = function (value) {
            this.hangupCallbackMethod = value;
        };
    
        /**
         * URL requested once the call connects
         *
         * @return {string|null}
         */
        Body47.prototype.getHeartbeatUrl = function () {
            return this.heartbeatUrl;
        };
    
        /**
         * Setter for HeartbeatUrl
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setHeartbeatUrl = function (value) {
            this.heartbeatUrl = value;
        };
    
        /**
         * URL that can be requested every 60 seconds during the call to notify of elapsed time
         *
         * @return {string|null}
         */
        Body47.prototype.getHeartbeatMethod = function () {
            return this.heartbeatMethod;
        };
    
        /**
         * Setter for HeartbeatMethod
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setHeartbeatMethod = function (value) {
            this.heartbeatMethod = value;
        };
    
        /**
         * URL requested when an SMS is received
         *
         * @return {string|null}
         */
        Body47.prototype.getSmsUrl = function () {
            return this.smsUrl;
        };
    
        /**
         * Setter for SmsUrl
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setSmsUrl = function (value) {
            this.smsUrl = value;
        };
    
        /**
         * Post or Get
         *
         * @return {string|null}
         */
        Body47.prototype.getSmsMethod = function () {
            return this.smsMethod;
        };
    
        /**
         * Setter for SmsMethod
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setSmsMethod = function (value) {
            this.smsMethod = value;
        };
    
        /**
         * URL used if any errors occur during execution of InboundXML from an SMS or at initial request of the
         * SmsUrl.
         *
         * @return {string|null}
         */
        Body47.prototype.getSmsFallbackUrl = function () {
            return this.smsFallbackUrl;
        };
    
        /**
         * Setter for SmsFallbackUrl
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setSmsFallbackUrl = function (value) {
            this.smsFallbackUrl = value;
        };
    
        /**
         * The HTTP method Ytel will use when URL requested if the SmsUrl is not available.
         *
         * @return {string|null}
         */
        Body47.prototype.getSmsFallbackMethod = function () {
            return this.smsFallbackMethod;
        };
    
        /**
         * Setter for SmsFallbackMethod
         * 
         * @param {string|null} value 
         */
        Body47.prototype.setSmsFallbackMethod = function (value) {
            this.smsFallbackMethod = value;
        };
    
        return Body47;
    }

}(angular));
