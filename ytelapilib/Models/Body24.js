/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body24
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body24', ['BaseModel', Body24Model]);

    function Body24Model(BaseModel) {
        var Body24 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.callSid = this.getValue(obj.callSid);
            this.audioDirection = this.getValue(obj.audioDirection);
            this.pitchSemiTones = this.getValue(obj.pitchSemiTones);
            this.pitchOctaves = this.getValue(obj.pitchOctaves);
            this.pitch = this.getValue(obj.pitch);
            this.rate = this.getValue(obj.rate);
            this.tempo = this.getValue(obj.tempo);
        };

        Body24.prototype = new BaseModel();
        Body24.prototype.constructor = Body24;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body24.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'callSid', realName: 'CallSid' },
                { name: 'audioDirection', realName: 'AudioDirection' },
                { name: 'pitchSemiTones', realName: 'PitchSemiTones' },
                { name: 'pitchOctaves', realName: 'PitchOctaves' },
                { name: 'pitch', realName: 'Pitch' },
                { name: 'rate', realName: 'Rate' },
                { name: 'tempo', realName: 'Tempo' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body24.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The unique identifier for the in-progress voice call.
         *
         * @return {string}
         */
        Body24.prototype.getCallSid = function () {
            return this.callSid;
        };
    
        /**
         * Setter for CallSid
         * 
         * @param {string} value 
         */
        Body24.prototype.setCallSid = function (value) {
            this.callSid = value;
        };
    
        /**
         * The direction the audio effect should be placed on. If IN, the effects will occur on the incoming audio
         * stream. If OUT, the effects will occur on the outgoing audio stream.
         *
         * @return {AudioDirectionEnum|null}
         */
        Body24.prototype.getAudioDirection = function () {
            return this.audioDirection;
        };
    
        /**
         * Setter for AudioDirection
         * 
         * @param {AudioDirectionEnum|null} value 
         */
        Body24.prototype.setAudioDirection = function (value) {
            this.audioDirection = value;
        };
    
        /**
         * Set the pitch in semitone (half-step) intervals. Value between -14 and 14
         *
         * @return {double|null}
         */
        Body24.prototype.getPitchSemiTones = function () {
            return this.pitchSemiTones;
        };
    
        /**
         * Setter for PitchSemiTones
         * 
         * @param {double|null} value 
         */
        Body24.prototype.setPitchSemiTones = function (value) {
            this.pitchSemiTones = value;
        };
    
        /**
         * Set the pitch in octave intervals.. Value between -1 and 1
         *
         * @return {double|null}
         */
        Body24.prototype.getPitchOctaves = function () {
            return this.pitchOctaves;
        };
    
        /**
         * Setter for PitchOctaves
         * 
         * @param {double|null} value 
         */
        Body24.prototype.setPitchOctaves = function (value) {
            this.pitchOctaves = value;
        };
    
        /**
         * Set the pitch (lowness/highness) of the audio. The higher the value, the higher the pitch. Value greater
         * than 0
         *
         * @return {double|null}
         */
        Body24.prototype.getPitch = function () {
            return this.pitch;
        };
    
        /**
         * Setter for Pitch
         * 
         * @param {double|null} value 
         */
        Body24.prototype.setPitch = function (value) {
            this.pitch = value;
        };
    
        /**
         * Set the rate for audio. The lower the value, the lower the rate. value greater than 0
         *
         * @return {double|null}
         */
        Body24.prototype.getRate = function () {
            return this.rate;
        };
    
        /**
         * Setter for Rate
         * 
         * @param {double|null} value 
         */
        Body24.prototype.setRate = function (value) {
            this.rate = value;
        };
    
        /**
         * Set the tempo (speed) of the audio. A higher value denotes a faster tempo. Value greater than 0
         *
         * @return {double|null}
         */
        Body24.prototype.getTempo = function () {
            return this.tempo;
        };
    
        /**
         * Setter for Tempo
         * 
         * @param {double|null} value 
         */
        Body24.prototype.setTempo = function (value) {
            this.tempo = value;
        };
    
        return Body24;
    }

}(angular));
