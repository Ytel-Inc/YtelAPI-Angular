/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body1
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body1', ['BaseModel', Body1Model]);

    function Body1Model(BaseModel) {
        var Body1 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.from = this.getValue(obj.from);
            this.to = this.getValue(obj.to);
            this.body = this.getValue(obj.body);
            this.method = this.getValue(obj.method);
            this.messageStatusCallback = this.getValue(obj.messageStatusCallback);
            this.smartsms = this.getValue(obj.smartsms);
            this.deliveryStatus = this.getValue(obj.deliveryStatus);
        };

        Body1.prototype = new BaseModel();
        Body1.prototype.constructor = Body1;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body1.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'from', realName: 'From' },
                { name: 'to', realName: 'To' },
                { name: 'body', realName: 'Body' },
                { name: 'method', realName: 'Method' },
                { name: 'messageStatusCallback', realName: 'MessageStatusCallback' },
                { name: 'smartsms', realName: 'Smartsms' },
                { name: 'deliveryStatus', realName: 'DeliveryStatus' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body1.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The 10-digit SMS-enabled Ytel number (E.164 format) in which the message is sent.
         *
         * @return {string}
         */
        Body1.prototype.getFrom = function () {
            return this.from;
        };
    
        /**
         * Setter for From
         * 
         * @param {string} value 
         */
        Body1.prototype.setFrom = function (value) {
            this.from = value;
        };
    
        /**
         * The 10-digit phone number (E.164 format) that will receive the message.
         *
         * @return {string}
         */
        Body1.prototype.getTo = function () {
            return this.to;
        };
    
        /**
         * Setter for To
         * 
         * @param {string} value 
         */
        Body1.prototype.setTo = function (value) {
            this.to = value;
        };
    
        /**
         * The body message that is to be sent in the text.
         *
         * @return {string}
         */
        Body1.prototype.getBody = function () {
            return this.body;
        };
    
        /**
         * Setter for Body
         * 
         * @param {string} value 
         */
        Body1.prototype.setBody = function (value) {
            this.body = value;
        };
    
        /**
         * Specifies the HTTP method used to request the required URL once SMS sent.
         *
         * @return {string|null}
         */
        Body1.prototype.getMethod = function () {
            return this.method;
        };
    
        /**
         * Setter for Method
         * 
         * @param {string|null} value 
         */
        Body1.prototype.setMethod = function (value) {
            this.method = value;
        };
    
        /**
         * URL that can be requested to receive notification when SMS has Sent. A set of default parameters will be
         * sent here once the SMS is finished.
         *
         * @return {string|null}
         */
        Body1.prototype.getMessageStatusCallback = function () {
            return this.messageStatusCallback;
        };
    
        /**
         * Setter for MessageStatusCallback
         * 
         * @param {string|null} value 
         */
        Body1.prototype.setMessageStatusCallback = function (value) {
            this.messageStatusCallback = value;
        };
    
        /**
         * Check's 'to' number can receive sms or not using Carrier API, if wireless = true then text sms is sent,
         * else wireless = false then call is recieved to end user with audible message.
         *
         * @return {bool|null}
         */
        Body1.prototype.getSmartsms = function () {
            return this.smartsms;
        };
    
        /**
         * Setter for Smartsms
         * 
         * @param {bool|null} value 
         */
        Body1.prototype.setSmartsms = function (value) {
            this.smartsms = value;
        };
    
        /**
         * Delivery reports are a method to tell your system if the message has arrived on the destination phone.
         *
         * @return {bool|null}
         */
        Body1.prototype.getDeliveryStatus = function () {
            return this.deliveryStatus;
        };
    
        /**
         * Setter for DeliveryStatus
         * 
         * @param {bool|null} value 
         */
        Body1.prototype.setDeliveryStatus = function (value) {
            this.deliveryStatus = value;
        };
    
        return Body1;
    }

}(angular));
