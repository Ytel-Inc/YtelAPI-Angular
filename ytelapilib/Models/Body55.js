/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body55
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body55', ['BaseModel', Body55Model]);

    function Body55Model(BaseModel) {
        var Body55 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.from = this.getValue(obj.from);
            this.to = this.getValue(obj.to);
            this.method = this.getValue(obj.method);
            this.statusCallBackUrl = this.getValue(obj.statusCallBackUrl);
            this.statusCallBackMethod = this.getValue(obj.statusCallBackMethod);
            this.fallbackUrl = this.getValue(obj.fallbackUrl);
            this.fallbackMethod = this.getValue(obj.fallbackMethod);
            this.record = this.getValue(obj.record);
            this.recordCallBackUrl = this.getValue(obj.recordCallBackUrl);
            this.recordCallBackMethod = this.getValue(obj.recordCallBackMethod);
            this.scheduleTime = this.getValue(obj.scheduleTime);
            this.timeout = this.getValue(obj.timeout);
        };

        Body55.prototype = new BaseModel();
        Body55.prototype.constructor = Body55;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body55.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'from', realName: 'From' },
                { name: 'to', realName: 'To' },
                { name: 'method', realName: 'Method' },
                { name: 'statusCallBackUrl', realName: 'StatusCallBackUrl' },
                { name: 'statusCallBackMethod', realName: 'StatusCallBackMethod' },
                { name: 'fallbackUrl', realName: 'FallbackUrl' },
                { name: 'fallbackMethod', realName: 'FallbackMethod' },
                { name: 'record', realName: 'Record' },
                { name: 'recordCallBackUrl', realName: 'RecordCallBackUrl' },
                { name: 'recordCallBackMethod', realName: 'RecordCallBackMethod' },
                { name: 'scheduleTime', realName: 'ScheduleTime' },
                { name: 'timeout', realName: 'Timeout' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body55.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * A valid 10-digit number (E.164 format) that will be initiating the conference call.
         *
         * @return {string}
         */
        Body55.prototype.getFrom = function () {
            return this.from;
        };
    
        /**
         * Setter for From
         * 
         * @param {string} value 
         */
        Body55.prototype.setFrom = function (value) {
            this.from = value;
        };
    
        /**
         * A valid 10-digit number (E.164 format) that is to receive the conference call.
         *
         * @return {string}
         */
        Body55.prototype.getTo = function () {
            return this.to;
        };
    
        /**
         * Setter for To
         * 
         * @param {string} value 
         */
        Body55.prototype.setTo = function (value) {
            this.to = value;
        };
    
        /**
         * Specifies the HTTP method used to request the required URL once call connects.
         *
         * @return {string|null}
         */
        Body55.prototype.getMethod = function () {
            return this.method;
        };
    
        /**
         * Setter for Method
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setMethod = function (value) {
            this.method = value;
        };
    
        /**
         * URL that can be requested to receive notification when call has ended. A set of default parameters will
         * be sent here once the conference is finished.
         *
         * @return {string|null}
         */
        Body55.prototype.getStatusCallBackUrl = function () {
            return this.statusCallBackUrl;
        };
    
        /**
         * Setter for StatusCallBackUrl
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setStatusCallBackUrl = function (value) {
            this.statusCallBackUrl = value;
        };
    
        /**
         * Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
         *
         * @return {string|null}
         */
        Body55.prototype.getStatusCallBackMethod = function () {
            return this.statusCallBackMethod;
        };
    
        /**
         * Setter for StatusCallBackMethod
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setStatusCallBackMethod = function (value) {
            this.statusCallBackMethod = value;
        };
    
        /**
         * URL requested if the initial Url parameter fails or encounters an error
         *
         * @return {string|null}
         */
        Body55.prototype.getFallbackUrl = function () {
            return this.fallbackUrl;
        };
    
        /**
         * Setter for FallbackUrl
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setFallbackUrl = function (value) {
            this.fallbackUrl = value;
        };
    
        /**
         * Specifies the HTTP method used to request the required FallbackUrl once call connects.
         *
         * @return {string|null}
         */
        Body55.prototype.getFallbackMethod = function () {
            return this.fallbackMethod;
        };
    
        /**
         * Setter for FallbackMethod
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setFallbackMethod = function (value) {
            this.fallbackMethod = value;
        };
    
        /**
         * Specifies if the conference should be recorded.
         *
         * @return {bool|null}
         */
        Body55.prototype.getRecord = function () {
            return this.record;
        };
    
        /**
         * Setter for Record
         * 
         * @param {bool|null} value 
         */
        Body55.prototype.setRecord = function (value) {
            this.record = value;
        };
    
        /**
         * Recording parameters will be sent here upon completion.
         *
         * @return {string|null}
         */
        Body55.prototype.getRecordCallBackUrl = function () {
            return this.recordCallBackUrl;
        };
    
        /**
         * Setter for RecordCallBackUrl
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setRecordCallBackUrl = function (value) {
            this.recordCallBackUrl = value;
        };
    
        /**
         * Specifies the HTTP method used to request the required URL once conference connects.
         *
         * @return {string|null}
         */
        Body55.prototype.getRecordCallBackMethod = function () {
            return this.recordCallBackMethod;
        };
    
        /**
         * Setter for RecordCallBackMethod
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setRecordCallBackMethod = function (value) {
            this.recordCallBackMethod = value;
        };
    
        /**
         * Schedule conference in future. Schedule time must be greater than current time
         *
         * @return {string|null}
         */
        Body55.prototype.getScheduleTime = function () {
            return this.scheduleTime;
        };
    
        /**
         * Setter for ScheduleTime
         * 
         * @param {string|null} value 
         */
        Body55.prototype.setScheduleTime = function (value) {
            this.scheduleTime = value;
        };
    
        /**
         * The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999
         * and the default limit is 60 seconds but lower times can be set.
         *
         * @return {int|null}
         */
        Body55.prototype.getTimeout = function () {
            return this.timeout;
        };
    
        /**
         * Setter for Timeout
         * 
         * @param {int|null} value 
         */
        Body55.prototype.setTimeout = function (value) {
            this.timeout = value;
        };
    
        return Body55;
    }

}(angular));
