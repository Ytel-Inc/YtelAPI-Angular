/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body21
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body21', ['BaseModel', Body21Model]);

    function Body21Model(BaseModel) {
        var Body21 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.to = this.getValue(obj.to);
            this.type = this.getValue(obj.type);
            this.subject = this.getValue(obj.subject);
            this.message = this.getValue(obj.message);
            this.from = this.getValue(obj.from);
            this.cc = this.getValue(obj.cc);
            this.bcc = this.getValue(obj.bcc);
            this.attachment = this.getValue(obj.attachment);
        };

        Body21.prototype = new BaseModel();
        Body21.prototype.constructor = Body21;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body21.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'to', realName: 'To' },
                { name: 'type', realName: 'Type' },
                { name: 'subject', realName: 'Subject' },
                { name: 'message', realName: 'Message' },
                { name: 'from', realName: 'From' },
                { name: 'cc', realName: 'Cc' },
                { name: 'bcc', realName: 'Bcc' },
                { name: 'attachment', realName: 'Attachment' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body21.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * A valid address that will receive the email. Multiple addresses can be separated by using commas.
         *
         * @return {string}
         */
        Body21.prototype.getTo = function () {
            return this.to;
        };
    
        /**
         * Setter for To
         * 
         * @param {string} value 
         */
        Body21.prototype.setTo = function (value) {
            this.to = value;
        };
    
        /**
         * Specifies the type of email to be sent
         *
         * @return {TypeEnum}
         */
        Body21.prototype.getType = function () {
            return this.type;
        };
    
        /**
         * Setter for Type
         * 
         * @param {TypeEnum} value 
         */
        Body21.prototype.setType = function (value) {
            this.type = value;
        };
    
        /**
         * The subject of the mail. Must be a valid string.
         *
         * @return {string}
         */
        Body21.prototype.getSubject = function () {
            return this.subject;
        };
    
        /**
         * Setter for Subject
         * 
         * @param {string} value 
         */
        Body21.prototype.setSubject = function (value) {
            this.subject = value;
        };
    
        /**
         * The email message that is to be sent in the text.
         *
         * @return {string}
         */
        Body21.prototype.getMessage = function () {
            return this.message;
        };
    
        /**
         * Setter for Message
         * 
         * @param {string} value 
         */
        Body21.prototype.setMessage = function (value) {
            this.message = value;
        };
    
        /**
         * A valid address that will send the email.
         *
         * @return {string|null}
         */
        Body21.prototype.getFrom = function () {
            return this.from;
        };
    
        /**
         * Setter for From
         * 
         * @param {string|null} value 
         */
        Body21.prototype.setFrom = function (value) {
            this.from = value;
        };
    
        /**
         * Carbon copy. A valid address that will receive the email. Multiple addresses can be separated by using
         * commas.
         *
         * @return {string|null}
         */
        Body21.prototype.getCc = function () {
            return this.cc;
        };
    
        /**
         * Setter for Cc
         * 
         * @param {string|null} value 
         */
        Body21.prototype.setCc = function (value) {
            this.cc = value;
        };
    
        /**
         * Blind carbon copy. A valid address that will receive the email. Multiple addresses can be separated by
         * using commas.
         *
         * @return {string|null}
         */
        Body21.prototype.getBcc = function () {
            return this.bcc;
        };
    
        /**
         * Setter for Bcc
         * 
         * @param {string|null} value 
         */
        Body21.prototype.setBcc = function (value) {
            this.bcc = value;
        };
    
        /**
         * A file that is attached to the email. Must be less than 7 MB in size.
         *
         * @return {string|null}
         */
        Body21.prototype.getAttachment = function () {
            return this.attachment;
        };
    
        /**
         * Setter for Attachment
         * 
         * @param {string|null} value 
         */
        Body21.prototype.setAttachment = function (value) {
            this.attachment = value;
        };
    
        return Body21;
    }

}(angular));
