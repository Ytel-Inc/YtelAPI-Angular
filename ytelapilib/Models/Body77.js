/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body77
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body77', ['BaseModel', Body77Model]);

    function Body77Model(BaseModel) {
        var Body77 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.from = this.getValue(obj.from);
            this.to = this.getValue(obj.to);
            this.url = this.getValue(obj.url);
            this.groupConfirmKey = this.getValue(obj.groupConfirmKey);
            this.groupConfirmFile = this.getValue(obj.groupConfirmFile);
            this.method = this.getValue(obj.method);
            this.statusCallBackUrl = this.getValue(obj.statusCallBackUrl);
            this.statusCallBackMethod = this.getValue(obj.statusCallBackMethod);
            this.fallBackUrl = this.getValue(obj.fallBackUrl);
            this.fallBackMethod = this.getValue(obj.fallBackMethod);
            this.heartBeatUrl = this.getValue(obj.heartBeatUrl);
            this.heartBeatMethod = this.getValue(obj.heartBeatMethod);
            this.timeout = this.getValue(obj.timeout);
            this.playDtmf = this.getValue(obj.playDtmf);
            this.hideCallerId = this.getValue(obj.hideCallerId);
            this.record = this.getValue(obj.record);
            this.recordCallBackUrl = this.getValue(obj.recordCallBackUrl);
            this.recordCallBackMethod = this.getValue(obj.recordCallBackMethod);
            this.transcribe = this.getValue(obj.transcribe);
            this.transcribeCallBackUrl = this.getValue(obj.transcribeCallBackUrl);
        };

        Body77.prototype = new BaseModel();
        Body77.prototype.constructor = Body77;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body77.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'from', realName: 'From' },
                { name: 'to', realName: 'To' },
                { name: 'url', realName: 'Url' },
                { name: 'groupConfirmKey', realName: 'GroupConfirmKey' },
                { name: 'groupConfirmFile', realName: 'GroupConfirmFile' },
                { name: 'method', realName: 'Method' },
                { name: 'statusCallBackUrl', realName: 'StatusCallBackUrl' },
                { name: 'statusCallBackMethod', realName: 'StatusCallBackMethod' },
                { name: 'fallBackUrl', realName: 'FallBackUrl' },
                { name: 'fallBackMethod', realName: 'FallBackMethod' },
                { name: 'heartBeatUrl', realName: 'HeartBeatUrl' },
                { name: 'heartBeatMethod', realName: 'HeartBeatMethod' },
                { name: 'timeout', realName: 'Timeout' },
                { name: 'playDtmf', realName: 'PlayDtmf' },
                { name: 'hideCallerId', realName: 'HideCallerId' },
                { name: 'record', realName: 'Record' },
                { name: 'recordCallBackUrl', realName: 'RecordCallBackUrl' },
                { name: 'recordCallBackMethod', realName: 'RecordCallBackMethod' },
                { name: 'transcribe', realName: 'Transcribe' },
                { name: 'transcribeCallBackUrl', realName: 'TranscribeCallBackUrl' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body77.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
         *
         * @return {string}
         */
        Body77.prototype.getFrom = function () {
            return this.from;
        };
    
        /**
         * Setter for From
         * 
         * @param {string} value 
         */
        Body77.prototype.setFrom = function (value) {
            this.from = value;
        };
    
        /**
         * Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g :
         * +12223334444,+15556667777
         *
         * @return {string}
         */
        Body77.prototype.getTo = function () {
            return this.to;
        };
    
        /**
         * Setter for To
         * 
         * @param {string} value 
         */
        Body77.prototype.setTo = function (value) {
            this.to = value;
        };
    
        /**
         * URL requested once the call connects
         *
         * @return {string}
         */
        Body77.prototype.getUrl = function () {
            return this.url;
        };
    
        /**
         * Setter for Url
         * 
         * @param {string} value 
         */
        Body77.prototype.setUrl = function (value) {
            this.url = value;
        };
    
        /**
         * Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
         *
         * @return {string}
         */
        Body77.prototype.getGroupConfirmKey = function () {
            return this.groupConfirmKey;
        };
    
        /**
         * Setter for GroupConfirmKey
         * 
         * @param {string} value 
         */
        Body77.prototype.setGroupConfirmKey = function (value) {
            this.groupConfirmKey = value;
        };
    
        /**
         * Specify the audio file you want to play when the called party picks up the call
         *
         * @return {GroupConfirmFileEnum}
         */
        Body77.prototype.getGroupConfirmFile = function () {
            return this.groupConfirmFile;
        };
    
        /**
         * Setter for GroupConfirmFile
         * 
         * @param {GroupConfirmFileEnum} value 
         */
        Body77.prototype.setGroupConfirmFile = function (value) {
            this.groupConfirmFile = value;
        };
    
        /**
         * Specifies the HTTP method used to request the required URL once call connects.
         *
         * @return {string|null}
         */
        Body77.prototype.getMethod = function () {
            return this.method;
        };
    
        /**
         * Setter for Method
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setMethod = function (value) {
            this.method = value;
        };
    
        /**
         * URL that can be requested to receive notification when call has ended. A set of default parameters will
         * be sent here once the call is finished.
         *
         * @return {string|null}
         */
        Body77.prototype.getStatusCallBackUrl = function () {
            return this.statusCallBackUrl;
        };
    
        /**
         * Setter for StatusCallBackUrl
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setStatusCallBackUrl = function (value) {
            this.statusCallBackUrl = value;
        };
    
        /**
         * Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
         *
         * @return {string|null}
         */
        Body77.prototype.getStatusCallBackMethod = function () {
            return this.statusCallBackMethod;
        };
    
        /**
         * Setter for StatusCallBackMethod
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setStatusCallBackMethod = function (value) {
            this.statusCallBackMethod = value;
        };
    
        /**
         * URL requested if the initial Url parameter fails or encounters an error
         *
         * @return {string|null}
         */
        Body77.prototype.getFallBackUrl = function () {
            return this.fallBackUrl;
        };
    
        /**
         * Setter for FallBackUrl
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setFallBackUrl = function (value) {
            this.fallBackUrl = value;
        };
    
        /**
         * Specifies the HTTP method used to request the required FallbackUrl once call connects.
         *
         * @return {string|null}
         */
        Body77.prototype.getFallBackMethod = function () {
            return this.fallBackMethod;
        };
    
        /**
         * Setter for FallBackMethod
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setFallBackMethod = function (value) {
            this.fallBackMethod = value;
        };
    
        /**
         * URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other
         * general information.
         *
         * @return {string|null}
         */
        Body77.prototype.getHeartBeatUrl = function () {
            return this.heartBeatUrl;
        };
    
        /**
         * Setter for HeartBeatUrl
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setHeartBeatUrl = function (value) {
            this.heartBeatUrl = value;
        };
    
        /**
         * Specifies the HTTP method used to request HeartbeatUrl.
         *
         * @return {string|null}
         */
        Body77.prototype.getHeartBeatMethod = function () {
            return this.heartBeatMethod;
        };
    
        /**
         * Setter for HeartBeatMethod
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setHeartBeatMethod = function (value) {
            this.heartBeatMethod = value;
        };
    
        /**
         * Time (in seconds) we should wait while the call is ringing before canceling the call
         *
         * @return {int|null}
         */
        Body77.prototype.getTimeout = function () {
            return this.timeout;
        };
    
        /**
         * Setter for Timeout
         * 
         * @param {int|null} value 
         */
        Body77.prototype.setTimeout = function (value) {
            this.timeout = value;
        };
    
        /**
         * DTMF Digits to play to the call once it connects. 0-9, #, or *
         *
         * @return {string|null}
         */
        Body77.prototype.getPlayDtmf = function () {
            return this.playDtmf;
        };
    
        /**
         * Setter for PlayDtmf
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setPlayDtmf = function (value) {
            this.playDtmf = value;
        };
    
        /**
         * Specifies if the caller id will be hidden
         *
         * @return {string|null}
         */
        Body77.prototype.getHideCallerId = function () {
            return this.hideCallerId;
        };
    
        /**
         * Setter for HideCallerId
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setHideCallerId = function (value) {
            this.hideCallerId = value;
        };
    
        /**
         * Specifies if the call should be recorded
         *
         * @return {bool|null}
         */
        Body77.prototype.getRecord = function () {
            return this.record;
        };
    
        /**
         * Setter for Record
         * 
         * @param {bool|null} value 
         */
        Body77.prototype.setRecord = function (value) {
            this.record = value;
        };
    
        /**
         * Recording parameters will be sent here upon completion
         *
         * @return {string|null}
         */
        Body77.prototype.getRecordCallBackUrl = function () {
            return this.recordCallBackUrl;
        };
    
        /**
         * Setter for RecordCallBackUrl
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setRecordCallBackUrl = function (value) {
            this.recordCallBackUrl = value;
        };
    
        /**
         * Method used to request the RecordCallback URL.
         *
         * @return {string|null}
         */
        Body77.prototype.getRecordCallBackMethod = function () {
            return this.recordCallBackMethod;
        };
    
        /**
         * Setter for RecordCallBackMethod
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setRecordCallBackMethod = function (value) {
            this.recordCallBackMethod = value;
        };
    
        /**
         * Specifies if the call recording should be transcribed
         *
         * @return {bool|null}
         */
        Body77.prototype.getTranscribe = function () {
            return this.transcribe;
        };
    
        /**
         * Setter for Transcribe
         * 
         * @param {bool|null} value 
         */
        Body77.prototype.setTranscribe = function (value) {
            this.transcribe = value;
        };
    
        /**
         * Transcription parameters will be sent here upon completion
         *
         * @return {string|null}
         */
        Body77.prototype.getTranscribeCallBackUrl = function () {
            return this.transcribeCallBackUrl;
        };
    
        /**
         * Setter for TranscribeCallBackUrl
         * 
         * @param {string|null} value 
         */
        Body77.prototype.setTranscribeCallBackUrl = function (value) {
            this.transcribeCallBackUrl = value;
        };
    
        return Body77;
    }

}(angular));
