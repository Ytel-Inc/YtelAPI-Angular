/**
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Body64
 *
 * @constructor
 */
angular.module('YtelAPILib')
    .factory('Body64', ['BaseModel', Body64Model]);

    function Body64Model(BaseModel) {
        var Body64 = function (obj) {
            if (obj === undefined || obj === null) {
                return;
            }
            this.conferenceSid = this.getValue(obj.conferenceSid);
            this.page = this.getValue(obj.page);
            this.pagesize = this.getValue(obj.pagesize);
            this.muted = this.getValue(obj.muted);
            this.deaf = this.getValue(obj.deaf);
        };

        Body64.prototype = new BaseModel();
        Body64.prototype.constructor = Body64;
    
        /**
         * Function containing information about the fields of this model
         * @return   {array}   Array of objects containing information about the fields
         */
        Body64.prototype.mappingInfo = function() {
            return BaseModel.prototype.mappingInfo.call(this).concat([
                { name: 'conferenceSid', realName: 'ConferenceSid' },
                { name: 'page', realName: 'Page' },
                { name: 'pagesize', realName: 'Pagesize' },
                { name: 'muted', realName: 'Muted' },
                { name: 'deaf', realName: 'Deaf' }
            ]);
        };
    
        /**
         * Function containing information about discriminator values
         * mapped with their corresponding model class names
         *
         * @return   {object}  Object containing Key-Value pairs mapping discriminator
         *                     values with their corresponding model classes
         */
        Body64.prototype.discriminatorMap = function() {
            return {};
        };
    
        /**
         * The unique identifier for a conference.
         *
         * @return {string}
         */
        Body64.prototype.getConferenceSid = function () {
            return this.conferenceSid;
        };
    
        /**
         * Setter for ConferenceSid
         * 
         * @param {string} value 
         */
        Body64.prototype.setConferenceSid = function (value) {
            this.conferenceSid = value;
        };
    
        /**
         * The page count to retrieve from the total results in the collection. Page indexing starts at 1.
         *
         * @return {int|null}
         */
        Body64.prototype.getPage = function () {
            return this.page;
        };
    
        /**
         * Setter for Page
         * 
         * @param {int|null} value 
         */
        Body64.prototype.setPage = function (value) {
            this.page = value;
        };
    
        /**
         * The count of objects to return per page.
         *
         * @return {int|null}
         */
        Body64.prototype.getPagesize = function () {
            return this.pagesize;
        };
    
        /**
         * Setter for Pagesize
         * 
         * @param {int|null} value 
         */
        Body64.prototype.setPagesize = function (value) {
            this.pagesize = value;
        };
    
        /**
         * Specifies if participant should be muted.
         *
         * @return {bool|null}
         */
        Body64.prototype.getMuted = function () {
            return this.muted;
        };
    
        /**
         * Setter for Muted
         * 
         * @param {bool|null} value 
         */
        Body64.prototype.setMuted = function (value) {
            this.muted = value;
        };
    
        /**
         * Specifies if the participant should hear audio in the conference.
         *
         * @return {bool|null}
         */
        Body64.prototype.getDeaf = function () {
            return this.deaf;
        };
    
        /**
         * Setter for Deaf
         * 
         * @param {bool|null} value 
         */
        Body64.prototype.setDeaf = function (value) {
            this.deaf = value;
        };
    
        return Body64;
    }

}(angular));
